{"mappings":"iiBAAAA,EAAA,SAAAC,SAAsCC,KAAKC,MAAK,oHCAhDC,EAAiBJ,EAAA,SAAAK,eAAyCL,EAAA,QAAA,CAA0B,QAAQ,0BCGtFM,EAAW,SAAAC,yBAAXD,gCAAAA,wDAAAA,GAAWE,KAAAC,QAyBRC,QAAUC,SAASC,cAAa,WACjCC,EAAMC,EAAQC,aAAY,CAAEC,KAAI,kBACpCH,EAAOI,UAAS,iJAE0CC,OAATC,EAAAf,GAAQ,YAEzDS,EAAOO,YAAWN,EAAMJ,6BA/BtBJ,EAAWC,iBAAXD,EAAW,EAMfe,IAAwB,0CAACC,EAAGC,EAAUC,GAEnB,OAAbD,GAAiBd,KACdgB,8BAGHC,EAAWxB,KAAKC,MAAMqB,QAErBG,aAAaD,QAEbE,0BAGPP,IAAoB,6CACbI,6BAcPJ,IAAoB,wCACCZ,KAAQC,QAAQmB,iBAAgB,UACnCC,QAAO,SAAEC,GACvBA,EAAQC,iBAAgB,SAASvB,KAAOwB,8BAI5CZ,IAAuB,2CACFZ,KAAQC,QAAQmB,iBAAgB,UACnCC,QAAO,SAAEC,GACvBA,EAAQG,oBAAmB,SAASzB,KAAOwB,8BAI/CZ,IAAY,8BAACc,GACXC,EAAAC,aAAaF,EAAMG,OAAOC,UAG5BlB,IAAY,8BAACK,OACPc,EAAO,GACPC,GAAQ,EACRC,EAAO,WACXhB,EAASiB,QAAQb,SAAO,SAAEc,GACxBJ,GAAO,sDAE4DtB,OAArC0B,EAAOC,GAAE,6BAAyC3B,OAAb0B,EAAOC,GAAE,KAC1D3B,OAD8DwB,EAAO,6BACvDxB,OAAd0B,EAAOC,GAAE,MAAkB3B,OAAb0B,EAAOE,MAAK,oCAGxCL,IACFA,GAAQ,EACRC,EAAO,YAGNhC,QAAQO,UAAS,cAElBC,OADGQ,EAASoB,MAAK,gBACT5B,OAARsB,EAAO,eApEFnB,IAAkB,2DAFzBf,EAAW,mBAASyC,cA2E1BC,eAAeC,OAAM,eAAiB3C","sources":["node_modules/@parcel/runtime-js/lib/runtime-edc0266a0b25f1a8.js","node_modules/@parcel/runtime-js/lib/runtime-6ed07eaa34e469dd.js","js/adr-question.js"],"sourcesContent":["require('./bundle-manifest').register(JSON.parse(\"{\\\"fgHDm\\\":\\\"index.841d6081.js\\\",\\\"llCf6\\\":\\\"style.45ee1b85.css\\\"}\"));","module.exports = require('./bundle-url').getBundleURL() + require('./relative-path')(\"fgHDm\", \"llCf6\")","import styleUrl from \"url:../styles/style.css\";\nimport { updateAnswer } from './utils/what-to-read';\n\nclass AdrQuestion extends HTMLElement {\n\n  static get observedAttributes() {\n    return ['question']\n  }\n\n  attributeChangedCallback(_, oldValue, newValue) {\n    // Remove the listeners of the old question\n    if (oldValue !== null) {\n      this.removeQuestionListeners()\n    }\n    // Get the new question structure from the stringified attribute\n    let question = JSON.parse(newValue)\n    // Show the new question in the DOM\n    this.showQuestion(question)\n    // Add the listeners of the new question\n    this.addQuestionListeners()\n  }\n\n  disconnectedCallback() {\n    this.removeQuestionListeners()\n  }\n\n  constructor() {\n    super()\n    this.wrapper = document.createElement('div')\n    var shadow = this.attachShadow({mode: 'closed'})\n    shadow.innerHTML = `\n      <link rel=\"stylesheet\" href=\"https://unpkg.com/purecss@1.0.0/build/pure-min.css\">\n      <link rel=\"stylesheet\" type=\"text/css\" href=\"${styleUrl}\">\n    `\n    shadow.appendChild(this.wrapper)\n  }\n\n  addQuestionListeners() {\n    let answersElements = this.wrapper.querySelectorAll('[name]')\n    answersElements.forEach((element) => {\n      element.addEventListener('change', this.selectAnswer)\n    })\n  }\n\n  removeQuestionListeners() {\n    let answersElements = this.wrapper.querySelectorAll('[name]')\n    answersElements.forEach((element) => {\n      element.removeEventListener('change', this.selectAnswer)\n    })\n  }\n\n  selectAnswer(event) {\n    updateAnswer(event.target.value)\n  }\n\n  showQuestion(question) {\n    let answers = ''\n    let first = true\n    let checked = ' checked'\n    question.choices.forEach((choice) => {\n      answers += `\n        <div>\n          <input type=\"radio\" id=\"${choice.id}\" name=\"question\" value=\"${choice.id}\"${checked}>\n          <label for=\"${choice.id}\">${choice.label}</label>\n        </div>\n      `\n      if (first) {\n        first = false\n        checked = ''\n      }\n    })\n    this.wrapper.innerHTML = `\n      <p>${question.label}</p>\n      ${answers}\n    `\n  }\n}\n\ncustomElements.define('adr-question', AdrQuestion)\n\n"],"names":["parcelRequire","register","JSON","parse","$27b1e12a16dcaaf8$exports","getBundleURL","$4ef0451f372d4b74$var$AdrQuestion","HTMLElement1","call","this","wrapper","document","createElement","shadow","_this","attachShadow","mode","innerHTML","concat","$parcel$interopDefault","appendChild","key","_","oldValue","newValue","removeQuestionListeners","question","showQuestion","addQuestionListeners","querySelectorAll","forEach","element","addEventListener","selectAnswer","removeEventListener","event","$3EUhB","updateAnswer","target","value","answers","first","checked","choices","choice","id","label","HTMLElement","customElements","define"],"version":3,"file":"index.841d6081.js.map"}